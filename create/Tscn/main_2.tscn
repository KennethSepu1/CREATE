[gd_scene load_steps=20 format=3 uid="uid://dfw0tliv7vhcf"]

[ext_resource type="PackedScene" uid="uid://clc5dre31iskm" path="res://addons/godot-xr-tools/xr/start_xr.tscn" id="1_medt2"]
[ext_resource type="PackedScene" uid="uid://c5kntt5h5ncqx" path="res://Tscn/Player.tscn" id="2_0tm1s"]
[ext_resource type="PackedScene" uid="uid://c8l60rnugru40" path="res://addons/godot-xr-tools/objects/pickable.tscn" id="3_htu45"]
[ext_resource type="PackedScene" uid="uid://daqhim147fkuk" path="res://addons/SEVEN_CARS/BLEND/SEVEN_CARS.blend" id="4_8o4it"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_sgjnq"]
sky_horizon_color = Color(0.662243, 0.671743, 0.686743, 1)
ground_horizon_color = Color(0.662243, 0.671743, 0.686743, 1)

[sub_resource type="Sky" id="Sky_htlq0"]
sky_material = SubResource("ProceduralSkyMaterial_sgjnq")

[sub_resource type="Environment" id="Environment_43bi4"]
background_mode = 2
sky = SubResource("Sky_htlq0")
tonemap_mode = 2

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_sgjnq"]
albedo_color = Color(0.25589, 0.481681, 0.163057, 1)

[sub_resource type="PlaneMesh" id="PlaneMesh_htlq0"]
material = SubResource("StandardMaterial3D_sgjnq")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_htlq0"]
albedo_color = Color(0.254902, 0.482353, 0.164706, 1)

[sub_resource type="SphereMesh" id="SphereMesh_43bi4"]
material = SubResource("StandardMaterial3D_htlq0")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_43bi4"]
albedo_color = Color(0, 0, 0, 1)

[sub_resource type="PlaneMesh" id="PlaneMesh_p0nv3"]
material = SubResource("StandardMaterial3D_43bi4")

[sub_resource type="Shader" id="Shader_medt2"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset + TIME;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction, uv1_power_normal, uv1_triplanar_pos), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;

	float refraction_depth_tex = textureLod(depth_texture, ref_ofs, 0.0).r;
	vec4 refraction_view_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, refraction_depth_tex, 1.0);
	refraction_view_pos.xyz /= refraction_view_pos.w;

	// If the depth buffer is lower then the model's Z position, use the refracted UV, otherwise use the normal screen UV.
	// At low depth differences, decrease refraction intensity to avoid sudden discontinuities.
	EMISSION += textureLod(screen_texture, mix(SCREEN_UV, ref_ofs, smoothstep(0.0, 1.0, VERTEX.z - refraction_view_pos.z)), ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_0tm1s"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_htu45"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_0tm1s")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_8o4it"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_0tm1s")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_a37g1"]
render_priority = 0
shader = SubResource("Shader_medt2")
shader_parameter/albedo = Color(0.450152, 0.406032, 0.203162, 1)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_8o4it")
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_normal = SubResource("NoiseTexture2D_htu45")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_e1ir8"]
material = SubResource("ShaderMaterial_a37g1")

[node name="Main2" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_43bi4")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866025, -0.433013, 0.25, 0, 0.5, 0.866025, -0.5, 0.75, -0.433013, 0, 0, 0)
shadow_bias = 6.385
directional_shadow_mode = 1

[node name="StartXR" parent="." instance=ExtResource("1_medt2")]

[node name="Player" parent="." instance=ExtResource("2_0tm1s")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.30281, -0.0856771, 0)

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(3.34261, 0, 0, 0, 0.747543, 0, 0, 0, 28.0788, 0, -0.276212, -8.28495)
mesh = SubResource("PlaneMesh_htlq0")

[node name="MeshInstance3D7" type="MeshInstance3D" parent="."]
transform = Transform3D(3.34261, 0, 0, 0, 0.747543, 0, 0, 0, 28.0788, -2.24714, -0.276212, -8.28495)
mesh = SubResource("PlaneMesh_htlq0")

[node name="PickableObject" parent="." instance=ExtResource("3_htu45")]

[node name="MeshInstance3D3" type="MeshInstance3D" parent="."]
transform = Transform3D(9.71953, 0, 0, 0, 10.1432, 0, 0, 0, 50.0465, -6.18019, -0.276212, -7.78229)
mesh = SubResource("SphereMesh_43bi4")
skeleton = NodePath("../MeshInstance3D")

[node name="MeshInstance3D4" type="MeshInstance3D" parent="."]
transform = Transform3D(9.7934, 0, 0, 0, 10.1432, 0, 0, 0, 50.0465, 6.72095, -0.276212, -7.78229)
mesh = SubResource("SphereMesh_43bi4")
skeleton = NodePath("../MeshInstance3D")

[node name="MeshInstance3D5" type="MeshInstance3D" parent="."]
transform = Transform3D(9.45526, 0, 13.0373, 0, 10.1432, 0, -2.55122, 0, 48.3185, 7.07021, -0.276212, -32.8409)
mesh = SubResource("SphereMesh_43bi4")
skeleton = NodePath("../MeshInstance3D")

[node name="MeshInstance3D9" type="MeshInstance3D" parent="."]
transform = Transform3D(6.04624, 0, 39.3699, 0, 10.1432, 0, -7.70413, 0, 30.8977, 2.95311, -0.276212, -48.0996)
mesh = SubResource("SphereMesh_43bi4")
skeleton = NodePath("../MeshInstance3D")

[node name="MeshInstance3D8" type="MeshInstance3D" parent="."]
transform = Transform3D(9.45526, 0, 8.16496, 0, 10.1432, 0, -2.55122, 0, 30.2607, -7.57317, -0.276212, -30.6903)
mesh = SubResource("SphereMesh_43bi4")
skeleton = NodePath("../MeshInstance3D")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 29.7745, 0, -0.25356, -7.01455)
mesh = SubResource("PlaneMesh_p0nv3")

[node name="MeshInstance3D6" type="MeshInstance3D" parent="."]
transform = Transform3D(0.850324, 0, 1.9725, 0, 1, 0, -0.526258, 0, 3.18716, -1.73576, -0.25356, -39.2902)
mesh = SubResource("PlaneMesh_p0nv3")

[node name="SEVEN_CARS" parent="." instance=ExtResource("4_8o4it")]
transform = Transform3D(-0.999789, 0, 0.0205236, 0, 1, 0, -0.0205236, 0, -0.999789, 0.0407526, -0.232823, 0.466699)

[node name="MeshInstance3D10" type="MeshInstance3D" parent="."]
transform = Transform3D(10.1002, 0, 0, 0, 1.87612, 0, 0, 0, 34.8945, 0.163471, -1.09355, -16.9775)
mesh = SubResource("BoxMesh_e1ir8")
